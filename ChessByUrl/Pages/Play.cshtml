@page "/play/{rulesetString?}/{boardString?}/{movesString?}"
@using System.Text.Json
@using ChessByUrl.Rules
@model PlayModel

@section WidgetPanel
{
    <div id="promotion-selector" class="widget">
    </div>
    <div class="widget">
        @if (Model.Game != null)
        {
            var status = Model.Game.Status;
            if (status.IsFinished)
            {
                <div>Game Over!</div>
                @if (status.PlayerPoints != null)
                {
                    var pointStrings = status.PlayerPoints.OrderBy(p => p.player.Id).Select(p => p.points == 0.5m ? "1/2" : p.points.ToString()).ToArray();
                    <div>Points: @string.Join(" - ", pointStrings)</div>
                }
            }
            <div>
                @if (status.StatusStrings != null)
                {
                    foreach ((Player? player, string statusString) in status.StatusStrings)
                    {
                        if (player == null)
                        {
                            <div>@char.ToUpper(statusString[0]) + statusString.Substring(1).</div>
                        }
                        else
                        {
                            <div>@($"{player.Name} {statusString}.")</div>
                        }
                    }
                }
            </div>
        }
    </div>
    <div id="moveList" class="widget">
        @if (Model.Game != null)
        {
            <ul>
                @foreach (var move in Model.Game.MovesSoFar)
                {
                    <li>@move.From - @move.To</li>
                }
            </ul>
        }
    </div>
}

<div class="board-wrapper">
    @if (Model.Game?.CurrentBoard != null && Model.LegalMoveUrlsFromSquare != null)
    {
        <table class="board showMoveFrom">
            <tr>
                <th class="coordCorner" />
                @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[0].Count; file++)
                {
                    <th class="file">@((char)('a' + file))</th>
                }
                <th class="coordCorner" />
            </tr>
            @for (int rank = Model.Game.CurrentBoard.Ranks.Count - 1; rank >= 0; rank--)
            {
                <tr>
                    <th class="rank">@(rank + 1)</th>
                    @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[rank].Count; file++)
                    {
                        var coords = new Coords(rank, file);
                        var piece = Model.Game.CurrentBoard.Ranks[rank][file];
                        var legalMoves = Model.LegalMoveUrlsFromSquare.GetValueOrDefault(coords.ToString()) ?? [];

                        var squareClass = "square";
                        squareClass += (rank + file) % 2 == 0 ? " light" : " dark";
                        squareClass += (legalMoves.Any()) ? " moveFrom" : "";

                        <td class="@squareClass" onclick="onSquareClick(this)" 
                            data-coords="@coords.ToString()" 
                            data-legalmoves="@JsonSerializer.Serialize(legalMoves)">
                            @if (piece != null)
                            {
                                <img src="/images/@piece.SvgFileName" alt="@piece.Name" />
                            }
                        </td>
                    }
                    <th class="coordLabel">@(rank + 1)</th>
                </tr>
            }
            <tr>
                <th class="coordCorner" />
                @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[0].Count; file++)
                {
                    <th class="file">@((char)('a' + file))</th>
                }
                <th class="coordCorner" />
            </tr>
        </table>
    }
</div>