@page "/play/{rulesetString?}/{boardString?}/{movesString?}"
@using System.Text.Json
@using ChessByUrl.Rules
@using ChessByUrl.Rules.Rulesets.Orthodox
@model PlayModel

@section WidgetPanel
{
    <div id="promotions" class="widget hidden">
        <h3>Select a promotion</h3>
        @if (Model.Game != null)
        {
            var pieceSet = OrthodoxPieceTypes.Player(Model.Game.CurrentPlayer.Id);
            PieceType[] promotionPieceTypes = [pieceSet.Queen, pieceSet.Rook, pieceSet.Bishop, pieceSet.Knight];
            <div>
                @for (int i = 0; i < promotionPieceTypes.Length; i++)
                {
                    <div class="promotionSelection" data-variant="i">
                        <img src="/images/@promotionPieceTypes[i].SvgFileName" alt="@promotionPieceTypes[i].Name" onclick="onPromotionClick(i)" />
                    </div>
                }
            </div>
        }
    </div>
    <div class="widget">
        @if (Model.Game != null)
        {
            var status = Model.Game.Status;
            if (status.IsFinished)
            {
                <h3>Game Over!</h3>
                @if (status.PlayerPoints != null)
                {
                    var pointStrings = status.PlayerPoints.OrderBy(p => p.player.Id).Select(p => p.points == 0.5m ? "1/2" : p.points.ToString()).ToArray();
                    <div>Points: @string.Join(" - ", pointStrings)</div>
                }
            }
            <div>
                @if (status.StatusStrings != null)
                {
                    foreach ((Player? player, string statusString) in status.StatusStrings)
                    {
                        if (player == null)
                        {
                            <h4>@char.ToUpper(statusString[0]) + statusString.Substring(1).</h4>
                        }
                        else
                        {
                            <h4>@($"{player.Name} {statusString}.")</h4>
                        }
                    }
                }
            </div>
        }
    </div>
    <div id="moveList" class="widget">
        @if (Model.Game != null)
        {
            var moves = Model.Game.MovesSoFar.ToList();
            var gameSoFar = new Game(Model.Game.Ruleset, Model.Game.InitialBoard);
            if (moves.Count > 0)
            {
                <h3>Moves</h3>
                <table>
                    <tr>
                        <th></th>
                        <th>White</th>
                        <th>Black</th>
                    </tr>
                    @for (int i = 0; i < moves.Count; i += 2)
                    {
                        var whiteMove = moves[i];
                        var whiteMoveNotation = Model.Game.Ruleset.GetMoveNotation(gameSoFar.CurrentBoard, whiteMove);
                        gameSoFar = gameSoFar.ApplyMove(whiteMove);
                        var blackMove = i + 1 < moves.Count ? moves[i + 1] : null;
                        var blackMoveNotation = blackMove != null ? Model.Game.Ruleset.GetMoveNotation(gameSoFar.CurrentBoard, blackMove) : null;
                        gameSoFar = blackMove != null ? gameSoFar.ApplyMove(blackMove) : gameSoFar;
                        <tr>
                            <th>@((i / 2) + 1)</th>
                            <td>@whiteMoveNotation</td>
                            <td>@blackMoveNotation</td>
                        </tr>
                    }
                </table>
            }
        }
    </div>
    <div>
        <a href="@($"/svg/{Model.RulesetString}/{Model.BoardString}/{Model.MovesString}")">View SVG</a>
    </div>
}

<div class="board-wrapper">
    @if (Model.Game?.CurrentBoard != null && Model.MovesFromSquare != null)
    {
        <table class="board showMoveFrom">
            <tr>
                <th class="coordCorner" />
                @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[0].Count; file++)
                {
                    <th class="file">@((char)('a' + file))</th>
                }
                <th class="coordCorner" />
            </tr>
            @for (int rank = Model.Game.CurrentBoard.Ranks.Count - 1; rank >= 0; rank--)
            {
                <tr>
                    <th class="rank">@(rank + 1)</th>
                    @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[rank].Count; file++)
                    {
                        var coords = new Coords(rank, file);
                        var piece = Model.Game.CurrentBoard.Ranks[rank][file];
                        var movesFrom = Model.MovesFromSquare.GetValueOrDefault(coords.ToString()) ?? [];

                        var squareClass = "square";
                        squareClass += (rank + file) % 2 == 0 ? " light" : " dark";
                        squareClass += (movesFrom.Any()) ? " moveFrom" : "";

                        <td class="@squareClass" onclick="onSquareClick(this)" 
                            data-coords="@coords.ToString()"
                            data-moveFrom="@JsonSerializer.Serialize(movesFrom)">
                            @if (piece != null)
                            {
                                <img src="/images/@piece.SvgFileName" alt="@piece.Name" />
                            }
                        </td>
                    }
                    <th class="coordLabel">@(rank + 1)</th>
                </tr>
            }
            <tr>
                <th class="coordCorner" />
                @for (int file = 0; file < Model.Game.CurrentBoard.Ranks[0].Count; file++)
                {
                    <th class="file">@((char)('a' + file))</th>
                }
                <th class="coordCorner" />
            </tr>
        </table>
    }
</div>